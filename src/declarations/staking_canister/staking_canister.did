type Transaction = 
 record {
   amount: nat;
   from: principal;
   method: text;
   time: Time;
   to: principal;
 };
type Time = int;
type StakingPoolDetails = 
 record {
   minimumStakeAmount: nat;
   minimumTotalStake: nat;
   noOfStakers: nat;
   poolEndTime: Time;
   poolName: text;
   poolStartTime: Time;
   rewardTokenCanisterId: text;
   rewardTokenSymbol: text;
   stakeLockDuration: nat;
   stakingTokenName: text;
   stakingTokenSymbol: text;
   totalFeeCollected: nat;
   totalTokensStaked: nat;
 };
type StakeMetrics = 
 record {
   apy: nat;
   bootstrapMultiplier: nat;
   lockPeriodWeight: int;
   stakeContributionRatio: nat;
   stakeId: StakeId;
   stakeLockPeriod: int;
   totalFeeCollected: nat;
   totalStakeWeight: nat;
   userFinalReward: nat;
   userStakeWeight: nat;
 };
type StakeId = nat;
type Stake = 
 record {
   amount: nat;
   id: StakeId;
   lastHarvestTime: int;
   lockEndTime: int;
   pendingRewards: nat;
   stakeTime: int;
   stakedReward: nat;
   staker: principal;
 };
type Result_2 = 
 variant {
   err: text;
   ok: StakeMetrics;
 };
type Result_1 = 
 variant {
   err: text;
   ok: bool;
 };
type Result = 
 variant {
   err: text;
   ok;
 };
type DoxaStaking = 
 service {
   calculateUserStakeMatric: (StakeId, principal) -> (Result_2) query;
   getBootstrapStatus: () ->
    (record {
       isBootstrapPhase: bool;
       timeRemaining: int;
     }) query;
   getLastProcessedTxId: () -> (nat) query;
   getPoolData: () -> (StakingPoolDetails);
   getTotalFeeCollectedFromLastRewardDistribution: () -> (nat) query;
   getTotalFeeCollectedSofar: () -> (nat) query;
   getTotalStakersWeight: () -> (nat);
   getUserStakeDetails: () -> (vec Stake) query;
   getUserTransactions: () -> (vec Transaction);
   getWeightTable: () -> (vec record {
                                nat;
                                nat;
                              }) query;
   harvestReward: (StakeId) -> (Result);
   isStakeAutoCompound: (StakeId) -> (Result_1) query;
   manuallyCompoundRewards: (StakeId) -> (Result);
   notifyStake: (nat, nat) -> (Result);
   previewWeightForDuration: (nat) -> (nat) query;
   toggleAutoCompound: (StakeId, AutoCompoundAction) -> (Result_1);
   unstake: (StakeId) -> (Result);
 };
type AutoCompoundAction = 
 variant {
   Cancel;
   Enable;
 };
service : () -> DoxaStaking
