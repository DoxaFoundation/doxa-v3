#
# Reproducible builds of the Doxa backend canister
#

FROM --platform=linux/amd64 ubuntu@sha256:bbf3d1baa208b7649d1d0264ef7d522e1dc0deeeaaf6085bf8e4618867f03494 AS base
# Note: The above is ubuntu 22.04

ENV TZ=UTC

# Install required tools
RUN DEBIAN_FRONTEND=noninteractive apt update && apt install -y \
    curl \
    ca-certificates \
    build-essential \
    pkg-config \
    libssl-dev \
    llvm-dev \
    liblmdb-dev \
    clang \
    cmake \
    jq \
    libunwind8 \
    netcat \
    && rm -rf /var/lib/apt/lists/*

# Gets dfx version from dfx.json in the root of the repo
#
# Note: This can be done in 'deps' but is slow because unrelated changes to dfx.json can cause a rebuild.
FROM base AS tool_versions
SHELL ["bash", "-c"]
RUN mkdir -p config
COPY dfx.json dfx.json
# save the dfx version to a file
RUN jq -r .dfx dfx.json > config/dfx_version 

# Install tools && warm up the build cache
FROM base AS deps
SHELL ["bash", "-c"]
# Install dfx
# Note: dfx is installed in `$HOME/.local/share/dfx/bin` but we can't reference `$HOME` here so we hardcode `/root`.
COPY --from=tool_versions /config/*_version config/
ENV PATH="/root/.local/share/dfx/bin:/root/.local/bin:${PATH}"
RUN DFXVM_INIT_YES=true DFX_VERSION="$(cat config/dfx_version)" sh -c "$(curl -fsSL https://sdk.dfinity.org/install.sh)" && dfx --version
RUN echo "dfx version: $(dfx --version)"

# Install node
RUN curl --fail -sSf https://raw.githubusercontent.com/nvm-sh/nvm/v0.39.7/install.sh | bash
ENV NVM_DIR=/root/.nvm
COPY .node-version .node-version
RUN . "$NVM_DIR/nvm.sh" && nvm install "$(cat .node-version)"
RUN . "$NVM_DIR/nvm.sh" && nvm use "v$(cat .node-version)"
RUN . "$NVM_DIR/nvm.sh" && nvm alias default "v$(cat .node-version)"
RUN ln -s "$NVM_DIR/versions/node/v$(cat .node-version)" "$NVM_DIR/versions/node/default"
ENV PATH="$NVM_DIR/versions/node/default/bin/:${PATH}"
RUN node --version
RUN npm --version

######## Creating networks.json  for dfx start to run port 8080 #########
# Create the .config/dfx directory if it doesn't exist
RUN mkdir -p /root/.config/dfx

# Create networks.json with proper JSON structure
RUN echo '{"local":{"bind":"127.0.0.1:8080","type":"ephemeral","replica":{"subnet_type":"system"}},"ic":{"providers":["https://mainnet.dfinity.network"],"type":"persistent"}}' > /root/.config/dfx/networks.json

RUN npm i -g ic-mops
RUN mops --version

# Set working directory
WORKDIR /doxa-v3
COPY . .

RUN npm install

# Create identities non-interactively
RUN dfx identity new minter --storage-mode plaintext
RUN dfx identity new doxa --storage-mode plaintext
RUN dfx identity use default

# Start dfx and wait for it to be ready
RUN dfx start --clean > /dev/null 2>&1 & \
    sleep 6 && \
    curl -I http://127.0.0.1:8080/api/v2/status && \
    ./scripts/deploy-local.sh && \
    sleep 6 && \
    dfx ping && \
    dfx stop

EXPOSE 80
# Dfx runs on port 8080
EXPOSE 8080

CMD ["dfx", "start"]
